{"version":3,"sources":["search/requests.js","constants.js","search/search.js","index.js"],"names":["fetch","url","Promise","resolve","reject","https","get","response","statusCode","Error","body","on","chunk","push","join","err","ALL_BREWERIES","BASE_QUERY","VALID_TAGS","VALID_TYPES","VALID_STATES","BY_STATE","BY_NAME","BY_TAGS","BY_TYPE","formatRequestFilter","states","names","tags","types","queries","forEach","state","includes","name","type","filterParams","substring","length","filter","then","console","log","JSON","parse"],"mappings":";AAEO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAFP,IAAA,EAAA,EAAA,QAAA,UAEO,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,MAAMA,EAASC,GACX,IAAIC,QAAQ,CAACC,EAASC,KACTC,EAAMC,QAAAA,IAAIL,EAAMM,KACxBA,EAASC,WAAa,KAAOD,EAASC,WAAa,MACnDJ,EAAO,IAAIK,sDAAsDF,EAASC,eAExEE,MAAAA,EAAO,GACbH,EAASI,GAAG,OAASC,GAAUF,EAAKG,KAAKD,IACzCL,EAASI,GAAG,MAAO,IAAMR,EAAQO,EAAKI,KAAK,QAEvCH,GAAG,QAAUI,GAAQX,EAAOW,MAVrC,QAAA,MAAA;;ACoBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,QAAA,YAAA,QAAA,WAAA,QAAA,WAAA,QAAA,mBAAA,EAtBA,MAAMC,EAAgB,0CAsBtB,QAAA,cAAA,EArBA,MAAMC,EAAa,2CAqBnB,QAAA,WAAA,EAnBA,MAAMC,EAAa,CACtB,eACA,QACA,eACA,aACA,SAcG,QAAA,WAAA,EAXA,MAAMC,EAAc,CACvB,QACA,WACA,UACA,QACA,WACA,MACA,WACA,cAGG,QAAA,YAAA,EAAA,MAAMC,EAAe,CACxB,UACA,SACA,UACA,WACA,aACA,WACA,cACA,WACA,UACA,UACA,SACA,QACA,WACA,UACA,OACA,SACA,WACA,YACA,QACA,WACA,gBACA,WACA,YACA,cACA,WACA,UACA,WACA,SACA,gBACA,aACA,aACA,WACA,iBACA,eACA,OACA,WACA,SACA,eACA,eACA,iBACA,eACA,YACA,QACA,OACA,UACA,WACA,aACA,gBACA,YACA,WAlDG,QAAA,aAAA;;ACKA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EA3BP,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,gBAEA,MAAMC,EAAW,YACXC,EAAU,WACVC,EAAU,WACVC,EAAU,WAEVC,EAAsB,CAACC,EAAQC,EAAOC,EAAMC,KAC1CC,IAAAA,EAAU,GACdJ,EAAOK,QAASC,IACRZ,EAAaa,aAAAA,SAASD,IACtBF,EAAQjB,iBAAmBmB,QAGnCL,EAAMI,QAASG,IACXJ,EAAQjB,gBAAkBqB,QAE9BL,EAAME,QAASI,IACPhB,EAAYc,YAAAA,SAASE,IACrBL,EAAQjB,gBAAkBsB,QAG5BC,MAAAA,EAAeN,EAAQhB,KAAK,IAC3BsB,OAAAA,EAAaC,UAAU,EAAGD,EAAaE,OAAS,IAG9CC,EAAS,CAACb,EAAS,GAAIC,EAAQ,GAAIC,EAAO,GAAIC,EAAQ,MACzDO,MAAAA,EAAeX,EAAoBC,EAAQC,EAAOC,EAAMC,GACvD,OAAA,EAAO,EAAA,UAAEZ,EAAW,aAAEmB,MAF1B,QAAA,OAAA;;ACxBP,aAHA,IAAA,EAAA,QAAA,oBAGA,EAAO,EAAA,QAAA,CAAC,WAAY,cAAe,GAAI,GAAI,CAAC,UAAUI,KAAMjC,IACxDkC,QAAQC,IAAIC,KAAKC,MAAMrC","file":"index.js","sourceRoot":"../lib","sourcesContent":["import https from \"https\";\n\nexport const fetch = (url) => {\n    return new Promise((resolve, reject) => {\n        const request = https.get(url, (response) => {\n            if (response.statusCode < 200 || response.statusCode > 299) {\n                reject(new Error(`Failed to complete request with status code: ${response.statusCode}`));\n            }\n            const body = [];\n            response.on('data', (chunk) => body.push(chunk));\n            response.on('end', () => resolve(body.join('')));\n        });\n        request.on('error', (err) => reject(err));\n    });\n};\n","export const ALL_BREWERIES = \"https://api.openbrewerydb.org/breweries\";\nexport const BASE_QUERY = \"https://api.openbrewerydb.org/breweries?\";\n\nexport const VALID_TAGS = [\n    \"dog-friendly\",\n    \"patio\",\n    \"food-service\",\n    \"food-truck\",\n    \"tours\"\n];\n\nexport const VALID_TYPES = [\n    \"micro\",\n    \"regional\",\n    \"brewpub\",\n    \"large\",\n    \"planning\",\n    \"bar\",\n    \"contract\",\n    \"proprietor\"\n];\n\nexport const VALID_STATES = [\n    \"alabama\",\n    \"alaska\",\n    \"arizona\",\n    \"arkansas\",\n    \"california\",\n    \"colorado\",\n    \"connecticut\",\n    \"delaware\",\n    \"florida\",\n    \"georgia\",\n    \"hawaii\",\n    \"idaho\",\n    \"illinois\",\n    \"indiana\",\n    \"iowa\",\n    \"kansas\",\n    \"kentucky\",\n    \"louisiana\",\n    \"maine\",\n    \"maryland\",\n    \"massachusetts\",\n    \"michigan\",\n    \"minnesota\",\n    \"mississippi\",\n    \"missouri\",\n    \"montana\",\n    \"nebraska\",\n    \"nevada\",\n    \"new_hampshire\",\n    \"new_jersey\",\n    \"new_mexico\",\n    \"new_york\",\n    \"north_carolina\",\n    \"north_dakota\",\n    \"ohio\",\n    \"oklahoma\",\n    \"oregon\",\n    \"pennsylvania\",\n    \"rhode_island\",\n    \"south_carolina\",\n    \"south_dakota\",\n    \"tennessee\",\n    \"texas\",\n    \"utah\",\n    \"vermont\",\n    \"virginia\",\n    \"washington\",\n    \"west_virginia\",\n    \"wisconsin\",\n    \"wyoming\"\n];\n","import { fetch } from \"./requests\";\nimport { BASE_QUERY, VALID_STATES, ALL_BREWERIES, VALID_TYPES } from \"../constants\";\n\nconst BY_STATE = \"by_state=\";\nconst BY_NAME = \"by_name=\";\nconst BY_TAGS = \"by_tags=\";\nconst BY_TYPE = \"by_type=\";\n\nconst formatRequestFilter = (states, names, tags, types) => {\n    let queries = [];\n    states.forEach((state) => {\n        if (VALID_STATES.includes(state)) {\n            queries.push(`${BY_STATE}${state}&`);\n        }\n    });\n    names.forEach((name) => {\n        queries.push(`${BY_NAME}${name}&`);\n    });\n    types.forEach((type) => {\n        if (VALID_TYPES.includes(type)) {\n            queries.push(`${BY_TYPE}${type}&`);\n        }\n    });\n    const filterParams = queries.join(\"\");\n    return filterParams.substring(0, filterParams.length - 1);\n};\n\nexport const filter = (states = [], names = [], tags = [], types = []) => {\n    const filterParams = formatRequestFilter(states, names, tags, types);\n    return fetch(`${BASE_QUERY}${filterParams}`);\n};\n","import { filter } from \"./search/search\";\n\n// assing in promise\nfilter([\"new_york\", \"california\"], [], [], [\"micro\"]).then((response) => {\n    console.log(JSON.parse(response));\n});"]}