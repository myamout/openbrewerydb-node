{"version":3,"sources":["search/requests.js","constants.js","search/validators.js","search/search.js","index.js"],"names":["fetch","url","Promise","resolve","reject","https","get","response","statusCode","Error","body","on","chunk","push","join","err","ALL_BREWERIES","BASE_QUERY","SEARCH_QUERY","INVALID_PARAM","VALID_TAGS","VALID_TYPES","VALID_STATES","validateStates","states","some","valid_state","includes","validateTypes","types","valid_type","validateTags","tags","valid_tag","BY_STATE","BY_NAME","BY_TAG","BY_TYPE","formatRequestFilter","names","length","queries","forEach","state","name","type","tag","filterParams","substring","filter","page","search","searchPhrase","phrase","getAll","base","params"],"mappings":"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","file":"index.js","sourceRoot":"../lib","sourcesContent":["import https from \"https\";\n\nexport const fetch = (url) => {\n    return new Promise((resolve, reject) => {\n        const request = https.get(url, (response) => {\n            if (response.statusCode < 200 || response.statusCode > 299) {\n                reject(new Error(`Failed to complete request with status code: ${response.statusCode}`));\n            }\n            const body = [];\n            response.on('data', (chunk) => body.push(chunk));\n            response.on('end', () => resolve(body.join('')));\n        });\n        request.on('error', (err) => reject(err));\n    });\n};\n","export const ALL_BREWERIES = \"https://api.openbrewerydb.org/breweries\";\nexport const BASE_QUERY = \"https://api.openbrewerydb.org/breweries?\";\nexport const SEARCH_QUERY = \"https://api.openbrewerydb.org/breweries/search?query=\";\nexport const INVALID_PARAM = \"INVALID_PARAM\";\n\nexport const VALID_TAGS = [\n    \"dog-friendly\",\n    \"patio\",\n    \"food-service\",\n    \"food-truck\",\n    \"tours\"\n];\n\nexport const VALID_TYPES = [\n    \"micro\",\n    \"regional\",\n    \"brewpub\",\n    \"large\",\n    \"planning\",\n    \"bar\",\n    \"contract\",\n    \"proprietor\"\n];\n\nexport const VALID_STATES = [\n    \"alabama\",\n    \"alaska\",\n    \"arizona\",\n    \"arkansas\",\n    \"california\",\n    \"colorado\",\n    \"connecticut\",\n    \"delaware\",\n    \"florida\",\n    \"georgia\",\n    \"hawaii\",\n    \"idaho\",\n    \"illinois\",\n    \"indiana\",\n    \"iowa\",\n    \"kansas\",\n    \"kentucky\",\n    \"louisiana\",\n    \"maine\",\n    \"maryland\",\n    \"massachusetts\",\n    \"michigan\",\n    \"minnesota\",\n    \"mississippi\",\n    \"missouri\",\n    \"montana\",\n    \"nebraska\",\n    \"nevada\",\n    \"new_hampshire\",\n    \"new_jersey\",\n    \"new_mexico\",\n    \"new_york\",\n    \"north_carolina\",\n    \"north_dakota\",\n    \"ohio\",\n    \"oklahoma\",\n    \"oregon\",\n    \"pennsylvania\",\n    \"rhode_island\",\n    \"south_carolina\",\n    \"south_dakota\",\n    \"tennessee\",\n    \"texas\",\n    \"utah\",\n    \"vermont\",\n    \"virginia\",\n    \"washington\",\n    \"west_virginia\",\n    \"wisconsin\",\n    \"wyoming\"\n];\n","import { VALID_STATES, VALID_TYPES, VALID_TAGS } from \"../constants\";\n\nexport const validateStates = (states) => {\n    return VALID_STATES.some(valid_state => states.includes(valid_state));\n};\n\nexport const validateTypes = (types) => {\n    return VALID_TYPES.some(valid_type => types.includes(valid_type));\n};\n\nexport const validateTags = (tags) => {\n    return VALID_TAGS.some(valid_tag => tags.includes(valid_tag));\n};\n","import { fetch } from \"./requests\";\nimport { BASE_QUERY, SEARCH_QUERY, ALL_BREWERIES, INVALID_PARAM } from \"../constants\";\nimport { validateStates, validateTypes, validateTags } from \"./validators\";\n\nconst BY_STATE = \"by_state=\";\nconst BY_NAME = \"by_name=\";\nconst BY_TAG = \"by_tag=\";\nconst BY_TYPE = \"by_type=\";\n\nconst formatRequestFilter = (states, names, tags, types) => {\n    // valid states and types\n    // before creating query\n    if (!validateStates(states) && states.length !== 0) {\n        return INVALID_PARAM\n    }\n\n    if (!validateTypes(types) && types.length !== 0) {\n        return INVALID_PARAM;\n    }\n\n    if (!validateTags(tags) && tags.length) {\n        return INVALID_PARAM;\n    }\n\n    const queries = [];\n    states.forEach((state) => {\n        queries.push(`${BY_STATE}${state}&`);\n    });\n    names.forEach((name) => {\n        queries.push(`${BY_NAME}${name}&`);\n    });\n    types.forEach((type) => {\n        queries.push(`${BY_TYPE}${type}&`);\n    });\n    tags.forEach((tag) => {\n        queries.push(`${BY_TAG}${tag}&`);\n    });\n    const filterParams = queries.join(\"\");\n    return filterParams.substring(0, filterParams.length - 1);\n};\n\nexport const filter = (states = [], names = [], tags = [], types = [], page = 1) => {\n    const filterParams = formatRequestFilter(states, names, tags, types);\n    return new Promise((resolve, reject) => {\n        if (filterParams !== INVALID_PARAM) {\n            resolve(search(BASE_QUERY, filterParams));\n        } else {\n            reject(\"Error: Invalid parameter given to filter search...\");\n        }\n    });\n};\n\nexport const searchPhrase = (phrase = \"\", page = 1) => {\n    return search(SEARCH_QUERY, phrase, page);\n};\n\nexport const getAll = (page = 1) => {\n    return fetch(`${ALL_BREWERIES}?page=${page}&per_page=50`);\n};\n\nconst search = (base, params, page) => {\n    return fetch(`${base}${params}&page=${page}&per_page=50`);\n};\n","import { getAll, filter, searchPhrase } from \"./search/search\";\n\nexport {\n    getAll,\n    filter,\n    searchPhrase\n};\n"]}